name: Build and Package CLI

on:
  push:
    branches: [ feat/cli_releaser ]
    paths:
      - 'cli/**'
      - '.github/workflows/build-and-package-cli.yml'
  workflow_dispatch:

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            python-arch: x64
          - arch: aarch64
            python-arch: x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: ${{ matrix.python-arch }}
        
    - name: Set up QEMU for cross-compilation
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: cli/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('cli/poetry.lock') }}
        
    - name: Install dependencies
      working-directory: cli
      run: poetry install
      
    - name: Install Ruby and fpm
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential
        sudo gem install --no-document fpm
        
    - name: Build CLI binary
      working-directory: cli
      run: |
        chmod +x build.sh
        if [ ! -d "helpers" ]; then
          ln -s ../helpers helpers
        fi
        ./build.sh --no-test --no-cleanup
        
    - name: Prepare binary for packaging
      working-directory: cli
      run: |
        mkdir -p packaging/usr/local/bin
        if [ -f "dist/nixopus" ]; then
          cp dist/nixopus packaging/usr/local/bin/
          if [ -d "dist/nixopus_linux_amd64" ]; then
            cp -r dist/nixopus_linux_amd64 packaging/usr/local/bin/
          elif [ -d "dist/nixopus_linux_arm64" ]; then
            cp -r dist/nixopus_linux_arm64 packaging/usr/local/bin/
          fi
        else
          echo "Build output not found in expected location"
          ls -la dist/
          exit 1
        fi
        chmod +x packaging/usr/local/bin/nixopus
        
    - name: Set architecture variables
      run: |
        echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "PKG_ARCH=${{ matrix.arch == 'aarch64' && 'arm64' || 'amd64' }}" >> $GITHUB_ENV
        
    - name: Create DEB package
      working-directory: cli
      run: |
        fpm -s dir -t deb \
          -n nixopus \
          -v "0.1.0" \
          -a "$PKG_ARCH" \
          --description "A CLI for Nixopus" \
          --maintainer "Nixopus <raghavyuva@gmail.com>" \
          --license "FSL" \
          --url "https://github.com/nixopus/cli" \
          --deb-priority optional \
          --deb-compression bzip2 \
          --prefix / \
          packaging/=/
          
    - name: Create RPM package
      working-directory: cli
      run: |
        fpm -s dir -t rpm \
          -n nixopus \
          -v "0.1.0" \
          -a "$PKG_ARCH" \
          --description "A CLI for Nixopus" \
          --maintainer "Nixopus <raghavyuva@gmail.com>" \
          --license "FSL" \
          --url "https://github.com/nixopus/cli" \
          --rpm-compression bzip2 \
          --prefix / \
          packaging/=/
          
    - name: Create TAR.GZ package
      working-directory: cli
      run: |
        fpm -s dir -t tar \
          -n nixopus \
          -v "0.1.0" \
          -a "$PKG_ARCH" \
          --description "A CLI for Nixopus" \
          --maintainer "Nixopus <raghavyuva@gmail.com>" \
          --license "FSL" \
          --url "https://github.com/nixopus/cli" \
          --prefix / \
          packaging/=/
          
    - name: Create APK package
      working-directory: cli
      run: |
        fpm -s dir -t apk \
          -n nixopus \
          -v "0.1.0" \
          -a "$PKG_ARCH" \
          --description "A CLI for Nixopus" \
          --maintainer "Nixopus <raghavyuva@gmail.com>" \
          --license "FSL" \
          --url "https://github.com/nixopus/cli" \
          --prefix / \
          packaging/=/
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nixopus-packages-${{ matrix.arch }}
        path: |
          cli/*.deb
          cli/*.rpm
          cli/*.tar
          cli/*.apk
        retention-days: 30

  create-release:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feat/cli_releaser' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create GitHub Release
      run: |
        RELEASE_TAG="cli-packages-$(date +%Y%m%d-%H%M%S)"
        gh release create "$RELEASE_TAG" \
          --title "CLI Packages Release" \
          --target ${{ github.ref_name }} \
          --prerelease \
          ./artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
